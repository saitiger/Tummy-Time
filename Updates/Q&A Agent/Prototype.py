import pandas as pd
import json
import streamlit as st
import plotly.express as px
from groq import Groq
import secrets

def groq_llm_chatbot(user_input, df):
    client = Groq(api_key = secrets["groq_api_key"])
    # Summary of the DataFrame
    df_summary = {
        "columns": list(df.columns),
        "dtypes": {col: str(dtype) for col, dtype in df.dtypes.items()},
        "shape": df.shape,
        "non_null_counts": df.count().to_dict(),
        "sample_values": {col: df[col].sample(min(5, len(df))).tolist() for col in df.columns}
    }
    
    prompt = f"""
    You are an AI assistant that helps users analyze data in a pandas DataFrame.
    Here's a summary of the DataFrame:
    - Shape: {df_summary['shape']}
    - Columns: {', '.join(df_summary['columns'])}
    - Data types: {json.dumps(df_summary['dtypes'])}
    - Non-null counts: {json.dumps(df_summary['non_null_counts'])}
    - Sample values for each column: {json.dumps(df_summary['sample_values'], default=str)}

    User query: {user_input}

    Based on this information, generate Python code to answer the user's query.
    The code should work with a pandas DataFrame named 'df'.
    If a plot is requested, use Plotly Express to create the visualization.
    Return your response as a JSON object with the following structure:
    {{
        "code": "The Python code to execute",
        "explanation": "A brief explanation of what the code does",
        "result_type": "One of: 'dataframe', 'plot', 'value', or 'error'"
    }}
    Ensure that your entire response is valid JSON.
    """

    try:
        chat_completion = client.chat.completions.create(
            messages=[
                {"role": "system", "content": "You are a helpful assistant that generates Python code for data analysis."},
                {"role": "user", "content": prompt}
            ],
            model="mixtral-8x7b-32768",
            temperature=0.5,
            max_tokens=1000,
        )

        # Parse the response
        response_content = chat_completion.choices[0].message.content.strip()
        
        try:
            result = json.loads(response_content)
        except json.JSONDecodeError:
            return f"LLM response was not valid JSON. Raw response:\n{response_content}", "Error: Invalid JSON response"

        code = result.get('code', '')
        explanation = result.get('explanation', 'No explanation provided')
        result_type = result.get('result_type', 'error')

        if code:
            try:
                local_vars = {"df": df, "px": px}
                exec(code, globals(), local_vars)

                # Extract the result
                if result_type == 'dataframe':
                    output = local_vars.get('result', "No DataFrame named 'result' was created.")
                elif result_type == 'plot':
                    output = local_vars.get('fig', "No Plotly figure named 'fig' was created.")
                elif result_type == 'value':
                    output = local_vars.get('result', "No value named 'result' was created.")
                else:
                    output = "An error occurred while processing the query."
            except Exception as e:
                output = f"Error executing code: {str(e)}"
        else:
            output = "No code was generated by the LLM."

        return output, explanation

    except Exception as e:
        return f"An error occurred while calling the Groq API: {str(e)}", "Error in API call or response processing."
